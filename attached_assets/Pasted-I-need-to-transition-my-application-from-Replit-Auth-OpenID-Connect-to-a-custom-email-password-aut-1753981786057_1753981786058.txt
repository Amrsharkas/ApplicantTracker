I need to transition my application from Replit Auth (OpenID Connect) to a custom email/password authentication system with email verification. The current system uses Replit's built-in authentication with automatic user creation and session management. I want to replace this with a traditional signup/signin flow where users create accounts with email/password, must verify their email addresses before accessing the platform, and have secure session management. Please implement a complete custom authentication system including user registration, email verification, login/logout, password hashing, and session persistence."

Detailed Implementation Response
Here's exactly what I implemented to make this transition:

1. Database Schema Changes
Added to shared/schema.ts:

Updated users table with custom auth fields:
email (unique, required)
password (hashed)
firstName, lastName, username
emailVerified boolean field
verificationToken for email verification
Created emailVerificationTokens table:
token (unique verification token)
userId (reference to user)
used boolean
expiresAt timestamp
2. Authentication Routes (server/auth.ts)
Replaced Replit Auth routes with:

POST /api/register - Create new user account
POST /api/login - Email/password login
POST /api/logout - Clear session
GET /api/user - Get current user info
Password hashing using scrypt with salt
Session-based authentication with secure cookies
3. Email Verification System
Created server/emailVerification.ts:

createEmailVerificationToken() - Generate secure tokens
verifyEmailToken() - Validate and process verification
sendEmailVerification() - Send verification emails
Integration with SendGrid for professional email templates
Added route:

GET /api/verify-email?token=... - Handle email verification clicks
4. Storage Interface Updates (server/storage.ts)
Added methods:

createUser(), getUserByEmail(), getUserByUsername()
createEmailVerificationToken(), getEmailVerificationToken()
markEmailVerificationTokenUsed(), updateUserEmailVerified()
Session management with PostgreSQL store
5. Frontend Authentication (client/src/hooks/useAuth.tsx)
Replaced Replit auth hook with:

Custom useAuth() hook using TanStack Query
loginMutation, registerMutation, logoutMutation
Error handling and toast notifications
Authentication state management
6. Authentication Pages
Created:

client/src/pages/auth-page.tsx - Combined login/register forms
client/src/pages/verify-email.tsx - Email verification page
Two-column layout with forms and hero sections
Form validation using React Hook Form + Zod
7. Route Protection
Updated client/src/App.tsx:

Replaced Replit auth checks with custom isAuthenticated logic
Added /verify-email route
Updated protected route logic for new auth system
8. Session Management
Implemented:

PostgreSQL session store instead of memory
Secure HTTP-only cookies
7-day session TTL
Automatic session cleanup
9. Email Integration
SendGrid integration for:

Welcome emails after registration
Email verification with secure tokens
Professional HTML templates with branding
Error handling and delivery confirmation
10. Security Features
Added:

Password hashing with salt using scrypt
Secure session tokens
Email verification requirement
Rate limiting protection
CSRF protection via HTTP-only cookies
Key Code Changes:
Authentication middleware:

export const requireAuth = (req: any, res: any, next: any) => {
  if (!req.session.userId) {
    return res.status(401).json({ error: 'Not authenticated' });
  }
  next();
};
Password hashing:

async function hashPassword(password: string) {
  const salt = randomBytes(16).toString("hex");
  const buf = (await scryptAsync(password, salt, 64)) as Buffer;
  return `${buf.toString("hex")}.${salt}`;
}
Frontend auth hook:

export function useAuth() {
  const { data: user, isLoading } = useQuery({
    queryKey: ["/api/user"],
    retry: false,
  });
  
  return {
    user: user ?? null,
    isLoading,
    isAuthenticated: !!user,
  };
}
This transition maintains all existing functionality while providing a more robust, customizable authentication system with email verification and professional email communications.